// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: artist/v1/artist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtistClient is the client API for Artist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistClient interface {
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumReply, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumReply, error)
	DeleteTrack(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*DeleteTrackReply, error)
}

type artistClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistClient(cc grpc.ClientConnInterface) ArtistClient {
	return &artistClient{cc}
}

func (c *artistClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumReply, error) {
	out := new(CreateAlbumReply)
	err := c.cc.Invoke(ctx, "/api.artist.v1.Artist/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumReply, error) {
	out := new(DeleteAlbumReply)
	err := c.cc.Invoke(ctx, "/api.artist.v1.Artist/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistClient) DeleteTrack(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*DeleteTrackReply, error) {
	out := new(DeleteTrackReply)
	err := c.cc.Invoke(ctx, "/api.artist.v1.Artist/DeleteTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtistServer is the server API for Artist service.
// All implementations must embed UnimplementedArtistServer
// for forward compatibility
type ArtistServer interface {
	CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumReply, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumReply, error)
	DeleteTrack(context.Context, *DeleteTrackRequest) (*DeleteTrackReply, error)
	mustEmbedUnimplementedArtistServer()
}

// UnimplementedArtistServer must be embedded to have forward compatible implementations.
type UnimplementedArtistServer struct {
}

func (UnimplementedArtistServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedArtistServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*DeleteAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedArtistServer) DeleteTrack(context.Context, *DeleteTrackRequest) (*DeleteTrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrack not implemented")
}
func (UnimplementedArtistServer) mustEmbedUnimplementedArtistServer() {}

// UnsafeArtistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServer will
// result in compilation errors.
type UnsafeArtistServer interface {
	mustEmbedUnimplementedArtistServer()
}

func RegisterArtistServer(s grpc.ServiceRegistrar, srv ArtistServer) {
	s.RegisterService(&Artist_ServiceDesc, srv)
}

func _Artist_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.artist.v1.Artist/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artist_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.artist.v1.Artist/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artist_DeleteTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServer).DeleteTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.artist.v1.Artist/DeleteTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServer).DeleteTrack(ctx, req.(*DeleteTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Artist_ServiceDesc is the grpc.ServiceDesc for Artist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Artist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.artist.v1.Artist",
	HandlerType: (*ArtistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlbum",
			Handler:    _Artist_CreateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _Artist_DeleteAlbum_Handler,
		},
		{
			MethodName: "DeleteTrack",
			Handler:    _Artist_DeleteTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artist/v1/artist.proto",
}
