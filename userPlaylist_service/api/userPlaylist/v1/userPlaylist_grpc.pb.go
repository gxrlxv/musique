// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: userPlaylist/v1/userPlaylist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackClient is the client API for Track service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackClient interface {
	AddTrack(ctx context.Context, in *AddTrackRequest, opts ...grpc.CallOption) (*AddTrackReply, error)
	RemoveTrack(ctx context.Context, in *RemoveTrackRequest, opts ...grpc.CallOption) (*RemoveTrackReply, error)
	GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksReply, error)
}

type trackClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackClient(cc grpc.ClientConnInterface) TrackClient {
	return &trackClient{cc}
}

func (c *trackClient) AddTrack(ctx context.Context, in *AddTrackRequest, opts ...grpc.CallOption) (*AddTrackReply, error) {
	out := new(AddTrackReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Track/AddTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackClient) RemoveTrack(ctx context.Context, in *RemoveTrackRequest, opts ...grpc.CallOption) (*RemoveTrackReply, error) {
	out := new(RemoveTrackReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Track/RemoveTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackClient) GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksReply, error) {
	out := new(GetTracksReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Track/GetTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackServer is the server API for Track service.
// All implementations must embed UnimplementedTrackServer
// for forward compatibility
type TrackServer interface {
	AddTrack(context.Context, *AddTrackRequest) (*AddTrackReply, error)
	RemoveTrack(context.Context, *RemoveTrackRequest) (*RemoveTrackReply, error)
	GetTracks(context.Context, *GetTracksRequest) (*GetTracksReply, error)
	mustEmbedUnimplementedTrackServer()
}

// UnimplementedTrackServer must be embedded to have forward compatible implementations.
type UnimplementedTrackServer struct {
}

func (UnimplementedTrackServer) AddTrack(context.Context, *AddTrackRequest) (*AddTrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrack not implemented")
}
func (UnimplementedTrackServer) RemoveTrack(context.Context, *RemoveTrackRequest) (*RemoveTrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTrack not implemented")
}
func (UnimplementedTrackServer) GetTracks(context.Context, *GetTracksRequest) (*GetTracksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracks not implemented")
}
func (UnimplementedTrackServer) mustEmbedUnimplementedTrackServer() {}

// UnsafeTrackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackServer will
// result in compilation errors.
type UnsafeTrackServer interface {
	mustEmbedUnimplementedTrackServer()
}

func RegisterTrackServer(s grpc.ServiceRegistrar, srv TrackServer) {
	s.RegisterService(&Track_ServiceDesc, srv)
}

func _Track_AddTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).AddTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Track/AddTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).AddTrack(ctx, req.(*AddTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Track_RemoveTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).RemoveTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Track/RemoveTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).RemoveTrack(ctx, req.(*RemoveTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Track_GetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackServer).GetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Track/GetTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackServer).GetTracks(ctx, req.(*GetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Track_ServiceDesc is the grpc.ServiceDesc for Track service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Track_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.track.v1.Track",
	HandlerType: (*TrackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrack",
			Handler:    _Track_AddTrack_Handler,
		},
		{
			MethodName: "RemoveTrack",
			Handler:    _Track_RemoveTrack_Handler,
		},
		{
			MethodName: "GetTracks",
			Handler:    _Track_GetTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userPlaylist/v1/userPlaylist.proto",
}
