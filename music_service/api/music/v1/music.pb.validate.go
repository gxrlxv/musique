// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: music/v1/music.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddTrackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTrackRequestMultiError, or nil if none found.
func (m *AddTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackId

	if len(errors) > 0 {
		return AddTrackRequestMultiError(errors)
	}

	return nil
}

// AddTrackRequestMultiError is an error wrapping multiple validation errors
// returned by AddTrackRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTrackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTrackRequestMultiError) AllErrors() []error { return m }

// AddTrackRequestValidationError is the validation error returned by
// AddTrackRequest.Validate if the designated constraints aren't met.
type AddTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTrackRequestValidationError) ErrorName() string { return "AddTrackRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTrackRequestValidationError{}

// Validate checks the field values on AddTrackReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddTrackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTrackReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddTrackReplyMultiError, or
// nil if none found.
func (m *AddTrackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTrackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddTrackReplyMultiError(errors)
	}

	return nil
}

// AddTrackReplyMultiError is an error wrapping multiple validation errors
// returned by AddTrackReply.ValidateAll() if the designated constraints
// aren't met.
type AddTrackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTrackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTrackReplyMultiError) AllErrors() []error { return m }

// AddTrackReplyValidationError is the validation error returned by
// AddTrackReply.Validate if the designated constraints aren't met.
type AddTrackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTrackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTrackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTrackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTrackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTrackReplyValidationError) ErrorName() string { return "AddTrackReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddTrackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTrackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTrackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTrackReplyValidationError{}

// Validate checks the field values on RemoveTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTrackRequestMultiError, or nil if none found.
func (m *RemoveTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackId

	if len(errors) > 0 {
		return RemoveTrackRequestMultiError(errors)
	}

	return nil
}

// RemoveTrackRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveTrackRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTrackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTrackRequestMultiError) AllErrors() []error { return m }

// RemoveTrackRequestValidationError is the validation error returned by
// RemoveTrackRequest.Validate if the designated constraints aren't met.
type RemoveTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTrackRequestValidationError) ErrorName() string {
	return "RemoveTrackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTrackRequestValidationError{}

// Validate checks the field values on RemoveTrackReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveTrackReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTrackReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTrackReplyMultiError, or nil if none found.
func (m *RemoveTrackReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTrackReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveTrackReplyMultiError(errors)
	}

	return nil
}

// RemoveTrackReplyMultiError is an error wrapping multiple validation errors
// returned by RemoveTrackReply.ValidateAll() if the designated constraints
// aren't met.
type RemoveTrackReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTrackReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTrackReplyMultiError) AllErrors() []error { return m }

// RemoveTrackReplyValidationError is the validation error returned by
// RemoveTrackReply.Validate if the designated constraints aren't met.
type RemoveTrackReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTrackReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTrackReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTrackReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTrackReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTrackReplyValidationError) ErrorName() string { return "RemoveTrackReplyValidationError" }

// Error satisfies the builtin error interface
func (e RemoveTrackReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTrackReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTrackReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTrackReplyValidationError{}

// Validate checks the field values on GetTracksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTracksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTracksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTracksRequestMultiError, or nil if none found.
func (m *GetTracksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTracksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTracksRequestMultiError(errors)
	}

	return nil
}

// GetTracksRequestMultiError is an error wrapping multiple validation errors
// returned by GetTracksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTracksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTracksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTracksRequestMultiError) AllErrors() []error { return m }

// GetTracksRequestValidationError is the validation error returned by
// GetTracksRequest.Validate if the designated constraints aren't met.
type GetTracksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTracksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTracksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTracksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTracksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTracksRequestValidationError) ErrorName() string { return "GetTracksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTracksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTracksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTracksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTracksRequestValidationError{}

// Validate checks the field values on GetTracksReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTracksReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTracksReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTracksReplyMultiError,
// or nil if none found.
func (m *GetTracksReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTracksReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTracksReplyMultiError(errors)
	}

	return nil
}

// GetTracksReplyMultiError is an error wrapping multiple validation errors
// returned by GetTracksReply.ValidateAll() if the designated constraints
// aren't met.
type GetTracksReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTracksReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTracksReplyMultiError) AllErrors() []error { return m }

// GetTracksReplyValidationError is the validation error returned by
// GetTracksReply.Validate if the designated constraints aren't met.
type GetTracksReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTracksReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTracksReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTracksReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTracksReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTracksReplyValidationError) ErrorName() string { return "GetTracksReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTracksReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTracksReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTracksReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTracksReplyValidationError{}
