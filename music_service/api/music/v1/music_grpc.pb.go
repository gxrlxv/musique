// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: music/v1/music.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicClient is the client API for Music service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicClient interface {
	AddTrack(ctx context.Context, in *AddTrackRequest, opts ...grpc.CallOption) (*AddTrackReply, error)
	AddAlbum(ctx context.Context, in *AddAlbumRequest, opts ...grpc.CallOption) (*AddAlbumReply, error)
	Delete(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*DeleteTrackReply, error)
	GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*GetTrackReply, error)
	GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksReply, error)
}

type musicClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicClient(cc grpc.ClientConnInterface) MusicClient {
	return &musicClient{cc}
}

func (c *musicClient) AddTrack(ctx context.Context, in *AddTrackRequest, opts ...grpc.CallOption) (*AddTrackReply, error) {
	out := new(AddTrackReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Music/AddTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) AddAlbum(ctx context.Context, in *AddAlbumRequest, opts ...grpc.CallOption) (*AddAlbumReply, error) {
	out := new(AddAlbumReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Music/AddAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) Delete(ctx context.Context, in *DeleteTrackRequest, opts ...grpc.CallOption) (*DeleteTrackReply, error) {
	out := new(DeleteTrackReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Music/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*GetTrackReply, error) {
	out := new(GetTrackReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Music/GetTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicClient) GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksReply, error) {
	out := new(GetTracksReply)
	err := c.cc.Invoke(ctx, "/api.track.v1.Music/GetTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServer is the server API for Music service.
// All implementations must embed UnimplementedMusicServer
// for forward compatibility
type MusicServer interface {
	AddTrack(context.Context, *AddTrackRequest) (*AddTrackReply, error)
	AddAlbum(context.Context, *AddAlbumRequest) (*AddAlbumReply, error)
	Delete(context.Context, *DeleteTrackRequest) (*DeleteTrackReply, error)
	GetTrack(context.Context, *GetTrackRequest) (*GetTrackReply, error)
	GetTracks(context.Context, *GetTracksRequest) (*GetTracksReply, error)
	mustEmbedUnimplementedMusicServer()
}

// UnimplementedMusicServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServer struct {
}

func (UnimplementedMusicServer) AddTrack(context.Context, *AddTrackRequest) (*AddTrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrack not implemented")
}
func (UnimplementedMusicServer) AddAlbum(context.Context, *AddAlbumRequest) (*AddAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlbum not implemented")
}
func (UnimplementedMusicServer) Delete(context.Context, *DeleteTrackRequest) (*DeleteTrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMusicServer) GetTrack(context.Context, *GetTrackRequest) (*GetTrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedMusicServer) GetTracks(context.Context, *GetTracksRequest) (*GetTracksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracks not implemented")
}
func (UnimplementedMusicServer) mustEmbedUnimplementedMusicServer() {}

// UnsafeMusicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServer will
// result in compilation errors.
type UnsafeMusicServer interface {
	mustEmbedUnimplementedMusicServer()
}

func RegisterMusicServer(s grpc.ServiceRegistrar, srv MusicServer) {
	s.RegisterService(&Music_ServiceDesc, srv)
}

func _Music_AddTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).AddTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Music/AddTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).AddTrack(ctx, req.(*AddTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_AddAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).AddAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Music/AddAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).AddAlbum(ctx, req.(*AddAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Music/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).Delete(ctx, req.(*DeleteTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Music/GetTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).GetTrack(ctx, req.(*GetTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Music_GetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServer).GetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.track.v1.Music/GetTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServer).GetTracks(ctx, req.(*GetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Music_ServiceDesc is the grpc.ServiceDesc for Music service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Music_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.track.v1.Music",
	HandlerType: (*MusicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrack",
			Handler:    _Music_AddTrack_Handler,
		},
		{
			MethodName: "AddAlbum",
			Handler:    _Music_AddAlbum_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Music_Delete_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _Music_GetTrack_Handler,
		},
		{
			MethodName: "GetTracks",
			Handler:    _Music_GetTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "music/v1/music.proto",
}
